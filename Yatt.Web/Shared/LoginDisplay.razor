@using System.Security.Claims
@inject IAuthService authService

@inject NavigationManager navigationManager
<AuthorizeView>
    <Authorized>
        <div class="pa-4 justify-center my-4 mud-text-align-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="auth/setting">Welcome : @email</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Logout">Log Out</MudButton>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="pa-4 justify-center my-4 mud-text-align-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="auth/register">Register</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Link="auth/login">Log in</MudButton>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? email { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var auth = ((await authState).User);
        if (auth != null && auth.Identity!.IsAuthenticated)
        {
            email = auth.Claims.First(a => a.Type == ClaimTypes.Email).Value;
        }
    }
    async Task Logout()
    {
        await authService.Logout();
        navigationManager.NavigateTo("/auth/login", true);
    }
}